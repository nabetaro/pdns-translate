#!/bin/sh -ex

tosql ()
{
	make -C ../pdns/backends/bind zone2sql > /dev/null
	../pdns/backends/bind/zone2sql --transactions --$1 --named-conf=./named.conf

}

port=$1
[ -z "$port" ] && port=5300
context=$2
[ -z "$context" ] && context=bind-dnssec
wait=$3

if [ "$port" = help ] || [ "$context" = help ]
then
	set +x
	cat << '__EOF__'

Usage: ./start-test-stop <port> [<context>] [wait]

context is one of:
bind bind-dnssec bind-dnssec-nsec3
gmysql-nodnssec gmysql gmysql-nsec3
gsqlite3-nodnssec gsqlite3 gsqlite3-nsec3
gpgsql-nodnssec gpgsql gpgsql-nsec3
tinydns

add 'wait' (literally) after the context to not kill 
pdns_server immediately after testing
__EOF__
	exit 1
fi

case $context in
		bind)
			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=bind --bind-config=./named.conf                \
				--fancy-records --query-logging --send-root-referral --loglevel=9    \
				--cache-ttl=0 --no-config &
			skipreasons=nodnssec
			;;
		bind-dnssec | bind-dnssec-nsec3 )
			./bind-dnssec-setup
            if [ $context = bind-dnssec-nsec3 ]
            then
                for zone in $(grep zone named.conf  | cut -f2 -d\")
                do
                    ../pdns/pdnssec --config-dir=. set-nsec3 $zone '1 1 1 abcd' 2>&1
                done
                extracontexts="bind dnssec nsec3"
            else
                extracontexts="bind dnssec"
            fi
			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=bind --bind-config=./named.conf       \
				--bind-dnssec-db=./dnssec.sqlite3 \
				--query-logging --send-root-referral --loglevel=9    \
				--cache-ttl=0 --no-config &
			;;
		gmysql-nodnssec)
			[ -z "$GMYSQLDB" ] && GMYSQLDB=pdnstest
			[ -z "$GMYSQLUSER" ] && GMYSQLUSER=root
			[ -z "$GMYSQLHOST" ] && GMYSQLHOST=localhost
			[ -z "$GMYSQLPASSWD" ] && GMYSQLPASSWD=''

			mysqladmin --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" --force drop "$GMYSQLDB" \
				|| echo ignoring mysqladmin drop failure
			mysqladmin --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" create "$GMYSQLDB"
			mysql --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" \
				"$GMYSQLDB" < ../pdns/no-dnssec.schema.mysql.sql

			tosql gmysql | mysql --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" \
				"$GMYSQLDB"

			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gmysql \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gmysql-dbname="$GMYSQLDB" \
				--gmysql-user="$GMYSQLUSER" \
				--gmysql-host="$GMYSQLHOST" \
				--gmysql-password="$GMYSQLPASSWD" &
			skipreasons=nodnssec
			;;

		gmysql | gmysql-nsec3)
			[ -z "$GMYSQLDB" ] && GMYSQLDB=pdnstest
			[ -z "$GMYSQLUSER" ] && GMYSQLUSER=root
			[ -z "$GMYSQLHOST" ] && GMYSQLHOST=localhost
			[ -z "$GMYSQLPASSWD" ] && GMYSQLPASSWD=''

			mysqladmin --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" --force drop "$GMYSQLDB" \
				|| echo ignoring mysqladmin drop failure
			mysqladmin --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" create "$GMYSQLDB"
			mysql --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" \
				"$GMYSQLDB" < ../pdns/no-dnssec.schema.mysql.sql
			mysql --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" \
				"$GMYSQLDB" < ../pdns/dnssec.schema.mysql.sql

			tosql gmysql | mysql --user="$GMYSQLUSER" --password="$GMYSQLPASSWD" --host="$GMYSQLHOST" \
				"$GMYSQLDB"

			cat > pdns-gmysql.conf << __EOF__
launch=gmysql
gmysql-dbname=$GMYSQLDB
gmysql-user=$GMYSQLUSER
gmysql-host=$GMYSQLHOST
gmysql-password=$GMYSQLPASSWD
gmysql-dnssec
__EOF__
			for zone in $(grep zone named.conf  | cut -f2 -d\")
			do
				../pdns/pdnssec --config-dir=. --config-name=gmysql	secure-zone $zone 2>&1
				if [ $context = gmysql-nsec3 ]
				then
					../pdns/pdnssec --config-dir=. --config-name=gmysql set-nsec3 $zone '1 1 1 abcd' 2>&1
					../pdns/pdnssec --config-dir=. --config-name=gmysql rectify-zone $zone 2>&1
				fi
			done

			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gmysql --gmysql-dnssec \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gmysql-dbname="$GMYSQLDB" \
				--gmysql-user="$GMYSQLUSER" \
				--gmysql-host="$GMYSQLHOST" \
				--gmysql-password="$GMYSQLPASSWD" &
			if [ $context = gmysql-nsec3 ]
			then
				extracontexts="dnssec nsec3"
			else
				extracontexts="dnssec"
			fi

			;;	
		gpgsql | gpgsql-nsec3)
			[ -z "$GPGSQLDB" ] && GPGSQLDB=pdnstest
			[ -z "$GPGSQLUSER" ] && GPGSQLUSER=$(whoami)

			dropdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring mysqladmin drop failure
			createdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring mysqladmin drop failure
			psql --user="$GPGSQLUSER" "$GPGSQLDB" < ../pdns/no-dnssec.schema.pgsql.sql
			psql --user="$GPGSQLUSER" "$GPGSQLDB" < ../pdns/dnssec.schema.pgsql.sql

			tosql gpgsql | psql --user="$GPGSQLUSER" "$GPGSQLDB" 2>&1 | uniq -c

			cat > pdns-gpgsql.conf << __EOF__
launch=gpgsql
gpgsql-dbname=$GPGSQLDB
gpgsql-user=$GPGSQLUSER
gpgsql-dnssec
__EOF__
			for zone in $(grep zone named.conf  | cut -f2 -d\")
			do
				../pdns/pdnssec --config-dir=. --config-name=gpgsql secure-zone $zone 2>&1
				if [ $context = gpgsql-nsec3 ]
				then
					../pdns/pdnssec --config-dir=. --config-name=gpgsql set-nsec3 $zone '1 1 1 abcd' 2>&1
					../pdns/pdnssec --config-dir=. --config-name=gpgsql rectify-zone $zone 2>&1
				fi
			done

			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gpgsql --gpgsql-dnssec \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gpgsql-dbname="$GPGSQLDB" \
				--gpgsql-user="$GPGSQLUSER" &
			if [ $context = gpgsql-nsec3 ]
			then
				extracontexts="dnssec nsec3"
			else
				extracontexts="dnssec"
			fi

			;;	
		gpgsql-nodnssec)
			[ -z "$GPGSQLDB" ] && GPGSQLDB=pdnstest
			[ -z "$GPGSQLUSER" ] && GPGSQLUSER=$(whoami)

			dropdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring mysqladmin drop failure
			createdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring mysqladmin drop failure
			psql --user="$GPGSQLUSER" "$GPGSQLDB" < ../pdns/no-dnssec.schema.pgsql.sql

			tosql gpgsql | psql --user="$GPGSQLUSER" "$GPGSQLDB" 2>&1 | uniq -c

			cat > pdns-gpgsql.conf << __EOF__
launch=gpgsql
gpgsql-dbname=$GPGSQLDB
gpgsql-user=$GPGSQLUSER
__EOF__
			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gpgsql \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gpgsql-dbname="$GPGSQLDB" \
				--gpgsql-user="$GPGSQLUSER" &
			skipreasons=nodnssec
			;;	


		gsqlite3-nodnssec)
			rm -f pdns.sqlite3
			sqlite3 pdns.sqlite3 < ../pdns/no-dnssec.schema.sqlite3.sql
			tosql gsqlite | sqlite3 pdns.sqlite3
			echo ANALYZE\; | sqlite3 pdns.sqlite3

			cat > pdns-gsqlite3.conf << __EOF__
launch=gsqlite3
gsqlite3-database=pdns.sqlite3
__EOF__

			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gsqlite3 \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gsqlite3-database=pdns.sqlite3 &
			skipreasons=nodnssec

			;;						
		gsqlite3 | gsqlite3-nsec3)
			rm -f pdns.sqlite3
			sqlite3 pdns.sqlite3 < ../pdns/no-dnssec.schema.sqlite3.sql
			sqlite3 pdns.sqlite3 < ../pdns/dnssec.schema.sqlite3.sql
			tosql gsqlite | sqlite3 pdns.sqlite3
			echo ANALYZE\; | sqlite3 pdns.sqlite3

			cat > pdns-gsqlite3.conf << __EOF__
launch=gsqlite3
gsqlite3-database=pdns.sqlite3
gsqlite3-dnssec
__EOF__
			for zone in $(grep zone named.conf  | cut -f2 -d\")
			do
				../pdns/pdnssec --config-dir=. --config-name=gsqlite3	secure-zone $zone 2>&1
				if [ $context = gsqlite3-nsec3 ]
				then
					../pdns/pdnssec --config-dir=. --config-name=gsqlite3 set-nsec3 $zone '1 1 1 abcd' 2>&1
					../pdns/pdnssec --config-dir=. --config-name=gsqlite3 rectify-zone $zone 2>&1
				fi
			done

			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./  \
				--no-shuffle --launch=gsqlite3 --gsqlite3-dnssec \
				--fancy-records --query-logging --send-root-referral --loglevel=9 \
				--cache-ttl=0 --no-config \
				--gsqlite3-database=pdns.sqlite3 &
			if [ $context = gsqlite3-nsec3 ]
			then
				extracontexts="dnssec nsec3"
			else
				extracontexts="dnssec"
			fi
			;;
		tinydns)
			../pdns/pdns_server --daemon=no --local-port=$port --socket-dir=./ \
				--no-shuffle --launch=tinydns \
				--query-logging --loglevel=9 --cache-ttl=0 --no-config \
				--send-root-referral \
				--tinydns-dbfile=../modules/tinydnsbackend/data.cdb & 
			skipreasons=nodnssec
			;;
		*)
			echo unknown context $context
			: > passed_tests
			echo 'unknown-context' > failed_tests
			./toxml $context
			exit 1
esac
		
export port
export context
export extracontexts
export skipreasons

## TODO: give pdns a few seconds to startup or fail, then check if it did not fail
## TODO: give sdig a timeout
nameserver=127.0.0.1 ./runtests
./toxml
./totar
if [ "$wait" = "wait" ]
then
	echo tests done! push enter to terminate instance
	read l
fi
kill $(cat pdns.pid)
